// Generated by CoffeeScript 2.5.1
(function() {
  var CWD, Client, SOURCES, Server, YAML, build, chokidar, ensureDirExists, fs, getSources, isNotEqual, nodemon, path, printHelp, watch;

  fs = require('fs');

  path = require('path');

  YAML = require('yaml');

  chokidar = require('chokidar');

  nodemon = require('nodemon');

  require('./ext');

  ({Client} = require('./client'));

  ({Server} = require('./server'));

  ({ensureDirExists, isNotEqual} = require('./util'));

  CWD = process.cwd();

  SOURCES = {};

  exports.run = function() {
    var _agn, _node, command;
    [_node, _agn, command] = process.argv;
    switch (command) {
      case 'build':
        return build();
      case 'watch':
        return watch();
      default:
        return printHelp();
    }
  };

  build = function() {
    var dir;
    dir = `${CWD}/dist`;
    ensureDirExists(dir);
    SOURCES = getSources();
    Server(SOURCES)(`${dir}/server`);
    return Client(SOURCES)(`${dir}/client`);
  };

  watch = function() {
    var watcher;
    build();
    watcher = chokidar.watch(['api.yml', 'functions/**/*.coffee', 'package.json'], {
      persistent: true,
      ignoreInitial: true
    });
    watcher.on('all', function(event, path) {
      console.log(event, path);
      return build();
    });
    return nodemon({
      script: 'dist/server/server.js'
    });
  };

  getSources = function() {
    var api, auth, functions, i, key, len, name, ref, verify;
    name = path.basename(CWD);
    api = YAML.parse(fs.readFileSync(`${CWD}/api.yml`, 'utf-8'));
    functions = {};
    ref = Object.keys(api.functions);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      functions[key] = fs.readFileSync(`${CWD}/functions/${key}.coffee`, 'utf-8');
    }
    verify = `${CWD}/auth/verifyToken.coffee`;
    if (fs.existsSync(verify)) {
      auth = fs.readFileSync(verify, 'utf-8');
    }
    return {name, api, functions, auth};
  };

  printHelp = function() {
    return console.log('printHelp');
  };

}).call(this);
