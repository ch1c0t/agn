// Generated by CoffeeScript 2.5.1
(function() {
  var Client, Server, YAML, build, chokidar, cwd, ensureDirExists, exec, fs, getSources, installPackages, installPackagesIfNeeded, isNotEqual, nodemon, path, previousDependencies, printHelp, sources, watch;

  fs = require('fs');

  path = require('path');

  YAML = require('yaml');

  chokidar = require('chokidar');

  nodemon = require('nodemon');

  require('./ext');

  ({Client} = require('./client'));

  ({Server} = require('./server'));

  ({ensureDirExists, isNotEqual} = require('./util'));

  cwd = process.cwd();

  sources = {};

  previousDependencies = {};

  exports.run = function() {
    var _agn, _node, command;
    [_node, _agn, command] = process.argv;
    switch (command) {
      case 'build':
        return build();
      case 'watch':
        return watch();
      default:
        return printHelp();
    }
  };

  build = function() {
    var dir;
    dir = `${cwd}/build`;
    ensureDirExists(dir);
    sources = getSources();
    Server(sources)(`${dir}/server`);
    return Client(sources)(`${dir}/client`);
  };

  watch = function() {
    var ref, watcher;
    chokidar.watch('build/server/package.json').on('change', installPackagesIfNeeded);
    build();
    previousDependencies = (ref = sources.api.server) != null ? ref.dependencies : void 0;
    installPackages();
    watcher = chokidar.watch(['api.yml', 'functions/**/*.coffee'], {
      persistent: true,
      ignoreInitial: true
    });
    watcher.on('all', function(event, path) {
      console.log(event, path);
      return build();
    });
    return nodemon({
      script: 'build/server/server.js'
    });
  };

  ({exec} = require('child_process'));

  installPackages = function() {
    console.log('installPackages');
    return exec('npm install', {
      cwd: `${process.cwd()}/build/server`
    });
  };

  installPackagesIfNeeded = function(path) {
    var currentDependencies, ref;
    console.log('change', path);
    if (currentDependencies = (ref = sources.api.server) != null ? ref.dependencies : void 0) {
      if (isNotEqual(currentDependencies, previousDependencies)) {
        installPackages();
        return previousDependencies = currentDependencies;
      }
    }
  };

  getSources = function() {
    var api, functions, i, key, len, name, ref;
    name = path.basename(cwd);
    api = YAML.parse(fs.readFileSync(`${cwd}/api.yml`, 'utf-8'));
    functions = {};
    ref = Object.keys(api.functions);
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      functions[key] = fs.readFileSync(`${cwd}/functions/${key}.coffee`, 'utf-8');
    }
    return {name, api, functions};
  };

  printHelp = function() {
    return console.log('printHelp');
  };

}).call(this);
