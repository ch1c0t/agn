// Generated by CoffeeScript 2.5.1
(function() {
  var Validate;

  ({Validate} = require('../validator'));

  exports.Api = function() {
    this.createIfs = Validate(this.types);
    this.badResponse = 'the server responded with the status #{response.status}';
    this.createValidation = function({Of, fn, type}) {
      var badValue;
      badValue = '#{value}:#{typeof value} was received. Error: #{error.toString()}';
      return `validate${Of}Of_${fn} = (value) ->
  try
    throw "no value" unless value?

${this.createIfs({type}).indent({
        number: 4
      })}

  catch error
    throw new TypeError "${fn} requires ${type} output, but ${badValue}."`;
    };
    this.createFunctionWithInput = function(name) {
      return `${this.createValidation({
        Of: "Input",
        fn: name,
        type: this.functions[name].in
      })}

${this.createValidation({
        Of: "Output",
        fn: name,
        type: this.functions[name].out
      })}

exports.${name} = (input) ->
  validateInputOf_${name} input

  response = await HTTP.post '/',
    fn: '${name}'
    in: input

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${this.badResponse}."`;
    };
    this.createFunctionWithoutInput = function(name) {
      return `${this.createValidation({
        Of: "Output",
        fn: name,
        type: this.functions[name].out
      })}

exports.${name} = ->
  response = await HTTP.post '/', fn: '${name}'

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${this.badResponse}."`;
    };
    this.createCoffeeSource = function() {
      var address, functions;
      address = 'http://localhost:8080';
      functions = (Object.keys(this.functions)).map((fn) => {
        if (this.functions[fn].in) {
          return this.createFunctionWithInput(fn);
        } else {
          return this.createFunctionWithoutInput(fn);
        }
      });
      return `axios = require 'axios'

HTTP = axios.create
  baseURL: '${address}'

exports.SET_ADDRESS = (address) ->
  HTTP.defaults.baseURL = address

exports.SET_TOKEN = (token) ->
  header = 'Bearer' + ' ' + token
  HTTP.defaults.headers.common['Authorization'] = header

${functions.join("\n\n")}`;
    };
    return this;
  };

}).call(this);
