// Generated by CoffeeScript 2.5.1
(function() {
  var indexOf = [].indexOf;

  exports.Validate = function(types) {
    var arrayIf, coreIf, coreTypes, entry, userIf, userTypes;
    userTypes = types;
    userIf = function({value, type}) {
      var ifs, propName, propNameVariable, propType, ref;
      ifs = [];
      ref = userTypes[type];
      for (propName in ref) {
        propType = ref[propName];
        propNameVariable = `${value}_${propName}`;
        ifs.push(`unless ${value}.hasOwnProperty ${propName}
  error = yes

${propNameVariable} = ${value}.${propName}
${entry({
          value: propNameVariable,
          type: propType
        })}`);
      }
      return ifs.join("\n\n");
    };
    arrayIf = function({value, type}) {
      var elementType;
      if (value == null) {
        value = 'value';
      }
      elementType = type.slice(0, -2);
      return `if typeof ${value} isnt 'array'
  error = yes

for element in ${value}
${entry({
        value: 'element',
        type: elementType
      }).indent()}`;
    };
    coreTypes = ['Boolean', 'String'];
    coreIf = function({value, type}) {
      return `if typeof ${value} isnt '${type.toLowerCase()}'
  error = yes`;
    };
    entry = function(params) {
      var type;
      console.log(params);
      if (params.value == null) {
        params.value = 'value';
      }
      type = params.type;
      if (type.endsWith('[]')) {
        return arrayIf(params);
      } else if (indexOf.call(coreTypes, type) >= 0) {
        return coreIf(params);
      } else {
        return userIf(params);
      }
    };
    return entry;
  };

}).call(this);
