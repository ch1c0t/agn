// Generated by CoffeeScript 2.5.1
(function() {
  var coffee, fs;

  fs = require('fs');

  coffee = require('coffeescript');

  exports.createMainFile = function() {
    var catchBadRequest, listener, requestEnd, whenCases;
    catchBadRequest = `catch error
  console.log error
  response.statusCode = 400
  response.end()`;
    whenCases = (Object.keys(this.api.functions)).map((fn) => {
      var body, pre;
      pre = `when '${fn}'`;
      body = this.api.functions[fn].in ? `  await require('./functions/${fn}.js')(message.in)` : `  await require('./functions/${fn}.js')()`;
      return `${pre}\n${body}`;
    }).join("\n");
    requestEnd = () => {
      return `try
  message = JSON.parse data

  out = switch message.fn
${whenCases.indent({
        number: 4
      })}
    else
      throw 'bad request'
  
  response.setHeader 'Content-Type', 'application/json'
  response.statusCode = 200
  response.end JSON.stringify out: out
${catchBadRequest}`;
    };
    listener = `(request, response) ->
  try
    unless request.method in ['POST', 'OPTIONS']
      throw 'bad request'

    response.setHeader 'Access-Control-Allow-Origin', '*'

    switch request.method
      when 'OPTIONS'
        response.setHeader 'Access-Control-Allow-Methods', 'POST, OPTIONS'
        response.setHeader 'Access-Control-Allow-Headers', 'Authorization, Content-Type'
        response.setHeader 'Access-Control-Max-Age', '86400'
        response.end()
      when 'POST'
        unless request.headers['content-type']?.startsWith 'application/json'
          throw 'bad request'

        data = ''
        request.on 'data', (chunk) ->
          data += chunk
        request.on 'end', ->
${requestEnd().indent({
      number: 10
    })}
${catchBadRequest.indent({
      number: 2
    })}`;
    this.CoffeeSource = `http = require 'http'

server = http.createServer ${listener}

PORT = process.env.PORT or 8080
server.listen PORT, ->
  console.log "The server is listening."`;
    return this.createMainFile = function() {
      fs.writeFileSync(`${this.dir}/server.coffee`, this.CoffeeSource);
      return fs.writeFileSync(`${this.dir}/server.js`, coffee.compile(this.CoffeeSource));
    };
  };

}).call(this);
