// Generated by CoffeeScript 2.5.1
(function() {
  var Validate, coffee, ensureDirExists, fs;

  fs = require('fs');

  coffee = require('coffeescript');

  ({ensureDirExists} = require('../util'));

  ({Validate} = require('../validator'));

  exports.parseEntities = function() {
    var beforeEntry, entryFn, fn, i, index, len, lines, ref;
    ref = Object.keys(this);
    for (i = 0, len = ref.length; i < len; i++) {
      fn = ref[i];
      lines = this[fn].split("\n").reverse();
      index = lines.findIndex(function(line) {
        return (line.startsWith('->')) || (line.startsWith('('));
      });
      index = index + 1;
      beforeEntry = lines.slice(index).reverse().join("\n");
      entryFn = lines.slice(0, index).reverse().join("\n");
      this[fn] = {beforeEntry, entryFn};
    }
    return this;
  };

  exports.createFnFiles = function() {
    var createIfs, fn, fnSource, i, input, len, ref;
    createIfs = Validate(this.api.types);
    this.FnSource = {};
    ref = Object.keys(this.functions);
    for (i = 0, len = ref.length; i < len; i++) {
      fn = ref[i];
      input = this.api.functions[fn].in;
      fnSource = input ? `module.exports = (input) ->
  validateInput input
  fn input

${this.functions[fn].beforeEntry}
fn = ${this.functions[fn].entryFn}

validateInput = (value) ->
  throw 'no value' unless value?

${createIfs({
        type: input
      }).indent()}` : `module.exports = ->
  fn()

${this.functions[fn].beforeEntry}
fn = ${this.functions[fn].entryFn}`;
      this.FnSource[fn] = coffee.compile(fnSource);
    }
    return this.createFnFiles = function() {
      var j, len1, ref1, results;
      ensureDirExists(`${this.dir}/functions`);
      ref1 = Object.keys(this.functions);
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        fn = ref1[j];
        results.push(fs.writeFileSync(`${this.dir}/functions/${fn}.js`, this.FnSource[fn]));
      }
      return results;
    };
  };

}).call(this);
