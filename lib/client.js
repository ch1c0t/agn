// Generated by CoffeeScript 2.5.1
(function() {
  var Validate, badResponse, coffee, createCoffeeFile, createFunctionWithInput, createFunctionWithoutInput, createIfs, createJSFile, createPackageFile, createRootDirectory, createValidation, fs, root;

  fs = require('fs');

  coffee = require('coffeescript');

  ({Validate} = require('./validator'));

  root = '';

  createIfs = function() {};

  exports.createClient = function(sources) {
    createIfs = Validate(sources.api.types);
    createRootDirectory();
    createPackageFile(sources.name);
    createCoffeeFile(sources.api);
    return createJSFile();
  };

  createRootDirectory = function() {
    root = `${process.cwd()}/build/client`;
    return fs.mkdirSync(root);
  };

  createPackageFile = function(name) {
    var spec;
    spec = {
      name: `${name}.client`,
      dependencies: {
        axios: '*'
      }
    };
    return fs.writeFileSync(`${root}/package.json`, JSON.stringify(spec));
  };

  createCoffeeFile = function(api) {
    var address, functions;
    address = 'http://localhost:8080';
    functions = (Object.keys(api.functions)).map(function(fn) {
      if (api.functions[fn].in) {
        return createFunctionWithInput(fn, api);
      } else {
        return createFunctionWithoutInput(fn, api);
      }
    });
    return fs.writeFileSync(`${root}/index.coffee`, `axios = require 'axios'

address = '${address}'
HTTP = axios

${functions.join("\n\n")}`);
  };

  createJSFile = function() {
    var source;
    source = coffee.compile(fs.readFileSync(`${root}/index.coffee`, 'utf-8'));
    return fs.writeFileSync(`${root}/index.js`, source);
  };

  badResponse = 'the server responded with the status #{response.status}';

  createFunctionWithInput = function(name, api) {
    return `${createValidation({
      Of: "Input",
      fn: name,
      type: api.functions[name].in
    })}

${createValidation({
      Of: "Output",
      fn: name,
      type: api.functions[name].out
    })}

exports.${name} = (input) ->
  validateInputOf_${name} input

  response = await HTTP.post address,
    fn: '${name}'
    in: input

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${badResponse}."`;
  };

  createFunctionWithoutInput = function(name, api) {
    return `${createValidation({
      Of: "Output",
      fn: name,
      type: api.functions[name].out
    })}

exports.${name} = ->
  response = await HTTP.post address, fn: '${name}'

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${badResponse}."`;
  };

  createValidation = function({Of, fn, type}) {
    var badValue;
    badValue = '#{value}:#{typeof value} was received. Error: #{error.toString()}';
    return `validate${Of}Of_${fn} = (value) ->
  try
    throw "no value" unless value?

${createIfs({type}).indent({
      number: 4
    })}

  catch error
    throw new TypeError "${fn} requires ${type} output, but ${badValue}."`;
  };

}).call(this);
