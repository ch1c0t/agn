// Generated by CoffeeScript 2.5.1
(function() {
  var Api, Validate, coffee, ensureDirExists, fs, fun;

  fs = require('fs');

  coffee = require('coffeescript');

  ({fun} = require('./fun'));

  ({ensureDirExists} = require('./util'));

  ({Validate} = require('./validator'));

  Api = function() {
    this.createIfs = Validate(this.types);
    this.badResponse = 'the server responded with the status #{response.status}';
    this.createValidation = function({Of, fn, type}) {
      var badValue;
      badValue = '#{value}:#{typeof value} was received. Error: #{error.toString()}';
      return `validate${Of}Of_${fn} = (value) ->
  try
    throw "no value" unless value?

${this.createIfs({type}).indent({
        number: 4
      })}

  catch error
    throw new TypeError "${fn} requires ${type} output, but ${badValue}."`;
    };
    this.createFunctionWithInput = function(name) {
      return `${this.createValidation({
        Of: "Input",
        fn: name,
        type: this.functions[name].in
      })}

${this.createValidation({
        Of: "Output",
        fn: name,
        type: this.functions[name].out
      })}

exports.${name} = (input) ->
  validateInputOf_${name} input

  response = await HTTP.post address,
    fn: '${name}'
    in: input

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${this.badResponse}."`;
    };
    this.createFunctionWithoutInput = function(name) {
      return `${this.createValidation({
        Of: "Output",
        fn: name,
        type: this.functions[name].out
      })}

exports.${name} = ->
  response = await HTTP.post address, fn: '${name}'

  if response.status is 200
    output = response.data.out
    validateOutputOf_${name} output
    output
  else
    throw "${name}: ${this.badResponse}."`;
    };
    this.createCoffeeSource = function() {
      var address, functions;
      address = 'http://localhost:8080';
      functions = (Object.keys(this.functions)).map((fn) => {
        if (this.functions[fn].in) {
          return this.createFunctionWithInput(fn);
        } else {
          return this.createFunctionWithoutInput(fn);
        }
      });
      return `axios = require 'axios'

address = '${address}'
HTTP = axios

${functions.join("\n\n")}`;
    };
    return this;
  };

  exports.Client = fun({
    init: {
      name: function() {
        return this;
      },
      api: Api
    },
    once: function() {
      this.PackageSource = JSON.stringify({
        name: `${this.name}.client`,
        dependencies: {
          axios: '*'
        }
      });
      this.createPackageFile = function() {
        return fs.writeFileSync(`${this.dir}/package.json`, this.PackageSource);
      };
      this.CoffeeSource = this.api.createCoffeeSource();
      this.createIndexFile = function() {
        fs.writeFileSync(`${this.dir}/index.coffee`, this.CoffeeSource);
        return fs.writeFileSync(`${this.dir}/index.js`, coffee.compile(this.CoffeeSource));
      };
      return this.inside = function(dir, fn) {
        var copy;
        ensureDirExists(dir);
        copy = Object.assign({}, this);
        copy.dir = dir;
        return fn.call(copy);
      };
    },
    call: function({dir}) {
      return this.inside(dir, function() {
        this.createPackageFile();
        return this.createIndexFile();
      });
    }
  });

}).call(this);
