// Generated by CoffeeScript 2.5.1
(function() {
  var Api, Generator, Validate, coffee, ensureDirExists, fs;

  fs = require('fs');

  coffee = require('coffeescript');

  ({Generator} = require('./generator'));

  ({ensureDirExists} = require('./util'));

  ({Validate} = require('./validator'));

  Api = function() {
    var functions, types;
    ({functions, types} = this);
    this.createIfs = Validate(types);
    this.whenCases = (Object.keys(functions)).map(function(fn) {
      var body, pre;
      pre = `when '${fn}'`;
      body = functions[fn].in ? `  await require('./functions/${fn}.js')(message.in)` : `  await require('./functions/${fn}.js')()`;
      return `${pre}\n${body}`;
    }).join("\n");
    return this;
  };

  exports.Server = Generator({
    init: {
      name: function() {
        return this;
      },
      api: Api,
      functions: function() {
        return this;
      }
    },
    once: function() {
      var catchBadRequest, fn, fnSource, i, input, len, listener, ref, requestEnd;
      this.PackageSource = JSON.stringify({
        name: `${this.name}.server`
      });
      this.createPackageFile = function() {
        return fs.writeFileSync(`${this.dir}/package.json`, this.PackageSource);
      };
      this.FnSource = {};
      ref = Object.keys(this.functions);
      for (i = 0, len = ref.length; i < len; i++) {
        fn = ref[i];
        input = this.api.functions[fn].in;
        fnSource = input ? `module.exports = (input) ->
  validateInput input
  fn input

fn = ${this.functions[fn]}

validateInput = (value) ->
  throw 'no value' unless value?

${this.api.createIfs({
          type: input
        }).indent()}` : `module.exports = ->
  fn()

fn = ${this.functions[fn]}`;
        this.FnSource[fn] = coffee.compile(fnSource);
      }
      this.createFnFiles = function() {
        var j, len1, ref1, results;
        ensureDirExists(`${this.dir}/functions`);
        ref1 = Object.keys(this.functions);
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          fn = ref1[j];
          results.push(fs.writeFileSync(`${this.dir}/functions/${fn}.js`, this.FnSource[fn]));
        }
        return results;
      };
      catchBadRequest = `catch error
  console.log error
  response.statusCode = 400
  response.end()`;
      requestEnd = () => {
        return `try
  message = JSON.parse data

  out = switch message.fn
${this.api.whenCases.indent({
          number: 4
        })}
    else
      throw 'bad request'
  
  response.setHeader 'Content-Type', 'application/json'
  response.statusCode = 200
  response.end JSON.stringify out: out
${catchBadRequest}`;
      };
      listener = `(request, response) ->
  try
    unless request.method in ['POST', 'OPTIONS']
      throw 'bad request'

    response.setHeader 'Access-Control-Allow-Origin', '*'

    switch request.method
      when 'OPTIONS'
        response.setHeader 'Access-Control-Allow-Methods', 'POST, OPTIONS'
        response.setHeader 'Access-Control-Allow-Headers', 'Authorization, Content-Type'
        response.setHeader 'Access-Control-Max-Age', '86400'
        response.end()
      when 'POST'
        unless request.headers['content-type']?.startsWith 'application/json'
          throw 'bad request'

        data = ''
        request.on 'data', (chunk) ->
          data += chunk
        request.on 'end', ->
${requestEnd().indent({
        number: 10
      })}
${catchBadRequest.indent({
        number: 2
      })}`;
      this.CoffeeSource = `http = require 'http'

server = http.createServer ${listener}

PORT = process.env.PORT or 8080
server.listen PORT, ->
  console.log "The server is listening."`;
      return this.createServer = function() {
        fs.writeFileSync(`${this.dir}/server.coffee`, this.CoffeeSource);
        return fs.writeFileSync(`${this.dir}/server.js`, coffee.compile(this.CoffeeSource));
      };
    },
    call: function({dir}) {
      return this.inside(dir, function() {
        this.createPackageFile();
        this.createFnFiles();
        return this.createServer();
      });
    }
  });

}).call(this);
